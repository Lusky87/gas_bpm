<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ include file="/hncis/include/common_sub.gas" %>
<%
	String menuId = "XRM07";
	String getDate = CurrentDateTime.getDate();
	
	String strSch = JSPMessageSource.getMessage("BUTTON.SEARCH", locale);
	
	String strBtn = "";
	strBtn = strSch+"/search";
%>
<html>
	<head>
		<title>System - Restrant Menu Management</title>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
	</head>
	<body>
		<div id="wrap">
			<form name="frm" id="frm">
				<input type="hidden" id="regdate" name="regdate"/>
				<input type="hidden" id="getDate" name="getDate" value="<%=getDate%>"/>
				<%@ include file="../include/hncis_header.gas"%>
				<div id="contents_wrap">
					<%@ include file="../include/hncis_left.gas"%>
					<div id="contents">
						<%=CommonGasc.getTitleAndButtonNew(sess_empno
							,menuId
							,strBtn
							,null
							,null
							,null
							,request)
						%>
						<div style="float:left; width:300px; height:1200px">
							<div class="con_t_area mt10" style="width:272px; height:50px">
								<div class="search_area">
				                	<table>
				                        <colgroup>
				                        	<col style="width:50px;" />
				                            <col style="width:150px;" />
				                        </colgroup>
				                        <tbody>
				                            <tr>
												<th class="div_nameF">Date</th>
												<td class="inputF">
													<select id="month">
														<option value="01">01</option>
														<option value="02">02</option>
														<option value="03">03</option>
														<option value="04">04</option>
														<option value="05">05</option>
														<option value="06">06</option>
														<option value="07">07</option>
														<option value="08">08</option>
														<option value="09">09</option>
														<option value="10">10</option>
														<option value="11">11</option>
														<option value="12">12</option>
													</select>
													/
													<select id="year">
														<option value="2016">2016</option>
														<option value="2017">2017</option>
														<option value="2018">2018</option>
														<option value="2019">2019</option>
														<option value="2020">2020</option>
													</select>
												</td>
											</tr>
				                        </tbody>
				                    </table>
				                </div>
							</div>
							<table id="htmlTable0" class="scroll"></table>
						</div>
						<div style="float:left; width:450px; height:300px">
							<div>
								<div class="con_t_area mt30" style="width:706px; height:30px">
									<h3 style="width:150px; float:left">Brazilian menu</h3>
									<div class="btn_area mt0"> 
										<ul class="btns fr ml20">
											<li><a href="javascript:retrieve('excel1')">Excel Upload<span></span></a></li>
											<li><a href="javascript:retrieve('add1')">AddRow<span></span></a></li> 
											<li><a href="javascript:retrieve('save1')">Save<span></span></a></li> 
											<li><a href="javascript:retrieve('delete1')">Delete<span></span></a></li> 
										</ul> 
									</div>
								</div>
								<table id="htmlTable1" class="scroll"></table>
							</div>
							<div>
								<div class="con_t_area mt10" style="width:706px; height:30px">
									<h3 style="width:150px; float:left">Korean menu</h3>
									<div class="btn_area mt0"> 
										<ul class="btns fr ml20">
											<li><a href="javascript:retrieve('excel2')">Excel Upload<span></span></a></li>
											<li><a href="javascript:retrieve('add2')">AddRow<span></span></a></li> 
											<li><a href="javascript:retrieve('save2')">Save<span></span></a></li> 
											<li><a href="javascript:retrieve('delete2')">Delete<span></span></a></li> 
										</ul> 
									</div>
								</div>
								<table id="htmlTable2" class="scroll"></table>
							</div>
							<div>
								<div class="con_t_area mt10" style="width:706px; height:30px">
									<h3 style="width:150px; float:left">Coffee</h3>
									<div class="btn_area mt0"> 
										<ul class="btns fr ml20">
											<li><a href="javascript:retrieve('add3')">AddRow<span></span></a></li> 
											<li><a href="javascript:retrieve('save3')">Save<span></span></a></li> 
											<li><a href="javascript:retrieve('delete3')">Delete<span></span></a></li> 
										</ul> 
									</div>
								</div>
								<table id="htmlTable3" class="scroll"></table>
							</div>
						</div>
						<div class="clear"></div>
						<%@ include file="../include/hncis_message.gas"%>
					</div>
					<div class="clear"></div>
				</div>
			</form>
			<form id="hideForm" name="hideForm" method="post">
				<input type="hidden" id="hid_csrfToken" name="hid_csrfToken">
				<input type="hidden" id="UPLOAD_TYPE"   name="UPLOAD_TYPE">
			</form>
		</div>			
	</body>
</html>
<script type="text/javascript">
function fnSetDocumentReady(){
	initMenus();
	$('#ST').slideDown('fast');
	var dateSliceYear = $("#getDate").val().substr(0,4);
	var dateSliceMonth = $("#getDate").val().substr(4,2);
	$("#month").val(dateSliceMonth);
	$("#year").val(dateSliceYear);
	setGridCombo();
}

function setGridCombo(){
	getCommonCode("b_menu_type:XST01:Z;k_menu_type:XST02:Z;k_menu_knd:XST03:Z;", "Y", "init();", "/getCommonCombo.do");
}

var gridParam0,gridParam1,gridParam2,gridParam3;
var gridName0 = "htmlTable0";
var gridName1 = "htmlTable1";
var gridName2 = "htmlTable2";
var gridName3 = "htmlTable3";
var datarow0  = {regdate:"", e_day:"", p_day:""};
var datarow1  = {b_menu_type:"", b_menu_nm:"", b_menu_sort:"", b_ptt_ymd:"", b_seq_no:""};
var datarow2  = {k_menu_type:"", k_menu_knd:"", k_menu_ko_nm:"", k_menu_en_nm:"", k_menu_po_nm:"", k_menu_sort:"", k_ptt_ymd:"", k_seq_no:""};
var datarow3  = {doc_no:"", co_name:"", co_amt:"", co_desc:"", co_met:"", sort_no:""};
function init(){
	gridParam0 = {
		viewEdit : [{
			gridName     : gridName0,
			url          : "doSearchByDateMenu.do",
			colNames     : ["Date", "Day", "Dia de semana"],
			colModel     : [{name:"regdate", index:"regdate", sortable:false, formatter:"string", width:"90", align:"center", editable:false, frozen:false},
			                {name:"e_day", index:"e_day", sortable:false, formatter:"string", width:"65", align:"center", editable:false, frozen:false},
			                {name:"p_day", index:"p_day", sortable:false, formatter:"string", width:"100", align:"center", editable:false, frozen:false}
							],
			width        : "270",
			height       : "713",
			paramJson    : fnParamJson(),
			rowNum       : 31,
			rownumbers   : false,
			multiselect  : false,
			cellEdit     : false,
			fnMerge      : false,
			selectCellFc  : "cellClickAction(rowid, iCol, cellcontent);",
			completeFc	 : "fnGridInitCallBack('"+gridName0+"');"
		}]
	};

	gridParam1 = {
		viewEdit : [{
			gridName     : gridName1,
			url          : "/doSearchToEmpty.do",
			colNames     : ["Menu Type", "Menu Name", "Sort", "ptt_ymd", "seq_no"],
			colModel     : [{name:"b_menu_type", index:"b_menu_type", sortable:false, edittype:"select", formatter:"select", width:"150", align:"center", editable:true,
				        	  editoptions:{value:getComboValue('b_menu_type'),
									dataInit: function(elem) {
										$(elem).width(140);
									}
				        	  }
			            	},
			                {name:"b_menu_nm", index:"b_menu_nm", sortable:false, formatter:"string", width:"392", align:"left", editable:true, frozen:false},
			            	{name:"b_menu_sort", index:"b_menu_sort", sortable:false, formatter:"string", width:"100", align:"right", editable:false, frozen:false},
			            	{name:"b_ptt_ymd", index:"b_ptt_ymd", sortable:false, formatter:"string", width:"0", align:"left", editable:false, frozen:false, hidden:true},
			            	{name:"b_seq_no", index:"b_seq_no", sortable:false, formatter:"string", width:"0", align:"left", editable:false, frozen:false, hidden:true}
			                ],
			width        : "700",
			height       : "322",
            rownumbers   : false,
            multiselect  : true,
            cellEdit     : true,
            fnMerge      : false,
            rowNum		 : 1000,
            dblClickRowFc : "",
            completeFc	 : "fnGridInitCallBack('"+gridName1+"');"
		}]
	};

	gridParam2 = {
		viewEdit : [{
			gridName     : gridName2,
			url          : "/doSearchToEmpty.do",
			colNames     : ["Menu Type", "Meal Time", "Korea Menu", "English Menu", "Portugal Menu", "Sort", "ptt_ymd", "seq_no"],
			colModel     : [{name:"k_menu_type", index:"k_menu_type", sortable:false, edittype:"select", formatter:"select", width:"150", align:"center", editable:true,
				        	  editoptions:{value:getComboValue('k_menu_type'),
									dataInit: function(elem) {
										$(elem).width(140);
									}
				        	  }
				        	},
				        	{name:"k_menu_knd", index:"k_menu_knd", sortable:false, edittype:"select", formatter:"select", width:"130", align:"center", editable:true,
				        	  editoptions:{value:getComboValue('k_menu_knd'),
									dataInit: function(elem) {
										$(elem).width(120);
									}
				        	  }
				        	},
			                {name:"k_menu_ko_nm", index:"k_menu_ko_nm", sortable:false, formatter:"string", width:"100", align:"left", editable:true, frozen:false},
			            	{name:"k_menu_en_nm", index:"k_menu_en_nm", sortable:false, formatter:"string", width:"110", align:"left", editable:true, frozen:false},
			            	{name:"k_menu_po_nm", index:"k_menu_po_nm", sortable:false, formatter:"string", width:"150", align:"left", editable:true, frozen:false},
			            	{name:"k_menu_sort", index:"k_menu_sort", sortable:false, formatter:"string", width:"100", align:"right", editable:false, frozen:false},
			            	{name:"k_ptt_ymd", index:"k_ptt_ymd", sortable:false, formatter:"string", width:"0", align:"left", editable:false, frozen:false, hidden:true},
			            	{name:"k_seq_no", index:"k_seq_no", sortable:false, formatter:"string", width:"0", align:"left", editable:false, frozen:false, hidden:true}
			            	],
			width        : "700",
			height       : "322",
		    rownumbers   : false,
		    multiselect  : true,
		    cellEdit     : true,
		    fnMerge      : false,
		    rowNum		 : 1000,
		    dblClickRowFc : "",
		    completeFc	 : "fnGridInitCallBack('"+gridName2+"');"
		}]
	};

	gridParam3 = {
		viewEdit : [{
			gridName     : gridName3,
			url          : "/doSearchToEmpty.do",
			colNames     : ["docNo", "Coffee Name", "Amount", "Description", "Dead line for request", "sort"],
			colModel     : [{name:"doc_no", index:"doc_no", sortable:false, formatter:"string", width:"0", align:"left", editable:false, frozen:false, hidden:true},
							{name:"co_name", index:"co_name", sortable:false, formatter:"string", width:"150", align:"left", editable:true, frozen:false},
							{name:"co_amt", index:"co_amt", sortable:false, formatter:numFormat, width:"100", align:"right", editable:true, frozen:false,
					        	formatoptions: {
					  			    decimalSeparator:",",
								    thousandsSeparator:".",
								    decimalPlaces:2,
								    defaultValue:""
							  	},
				  				editoptions: {dataInit: function(element) {
						     		    $(element).keyup(function(){
						     		    	if(!isNumeric(element.value)){
						     		    		element.value = element.value = selectNum(element.value, ",");
						     		    	}
						     		    });
						            }
				  				}
							 },
							{name:"co_desc", index:"co_desc", sortable:false, formatter:"string", width:"180", align:"left", editable:true, frozen:false},
							{name:"co_met", index:"co_met", sortable:false, formatter:"string", width:"150", align:"left", editable:true, frozen:false},
							{name:"sort_no", index:"sort_no", sortable:false, formatter:"string", width:"53", align:"left", editable:false, frozen:false}
						    ],
			width        : "700",
			height       : "322",
			rownumbers   : false,
			multiselect  : true,
			cellEdit     : true,
			fnMerge      : false,
			rowNum		 : 1000,
			dblClickRowFc : "",
			completeFc	 : "fnGridInitCallBack('"+gridName3+"');"
		}]
	};

	commonJqGridInit(gridParam0);
}

function fnGridInitCallBack(initGrid){
	switch(initGrid){
		case "htmlTable0" :
			addGridRow(31, initGrid, 'datarow0');
			commonJqGridInit(gridParam1);

			var gridRow  = jQuery("#"+gridName0);
			var ids      = gridRow.getDataIDs();
			for(var n = 1; n <= ids.length ; n++){
				var d = dateConversionKr(trimChar(getColValue("regdate", n, gridName0), "/"));
				if($("#getDate").val() == d){
					$("#regdate").val(d);
					jQuery("#"+gridName0).setRowData (n,false,{background:'#B2EBF4'});
					previSRow = n;
					setTimeout("doSubSearch('1');", 300);
					break;
				}
			}

			break;
		case "htmlTable1" :
			addGridRow(15, initGrid, 'datarow1');
			commonJqGridInit(gridParam2);
			break;
		case "htmlTable2" :
			addGridRow(15, initGrid, 'datarow2');
			commonJqGridInit(gridParam3);
			break;
		case "htmlTable3" :
			addGridRow(15, initGrid, 'datarow3');
			break;
	}
}

function retrieve(gubn){
	switch(gubn){
		case "search" :
			doSearch(0);
			break;
		case "search1" :
		case "search2" :
			doSearch(selectNum(gubn));
			break;
		case "save1" :
		case "save2" :
			doInsert(selectNum(gubn));
			break;
		case "save3" :
			doCoffeeInsert();
			break;
		case "delete1" :
		case "delete2" :
			doDelete(selectNum(gubn));
			break;
		case "delete3" :
			doCoffeeDelete();
			break;
		case "add1" :
		case "add2" :
		case "add3" :
			addRow(selectNum(gubn));
			break;
		case "excel1" :
		case "excel2" :
			fnExcelUpload(gubn);
			break;
	}
}

function fnParamJson(){
	var params = {
		yearMonth : $("#year").val()+$("#month").val(),
		b_ptt_ymd : $("#regdate").val(),
		k_ptt_ymd : $("#regdate").val()
	};
	return params;
}

function doSearch(no){
	if(no == 0){
		doCommonSearch("doSearchByDateMenu.do", util.jsonToString(fnParamJson()), "searchCallBack('"+no+"');", eval("gridName0"));
	}else{
		doCommonSearch("doSearchByMenu"+no+".do", util.jsonToString(fnParamJson()), "searchCallBack('"+no+"');", eval("gridName"+no));
	}
}

function searchCallBack(no){
	if(no == "0"){
		addGridRow(31, eval("gridName0"), eval("datarow0"));
		$("#htmlTable1").jqGrid("clearGridData", true);
		addGridRow(15, eval("gridName1"), eval("datarow1"));
		$("#htmlTable2").jqGrid("clearGridData", true);
		addGridRow(15, eval("gridName2"), eval("datarow2"));
	}else{
		addGridRow(15, eval("gridName"+no), eval("datarow"+no));
	}
}

function doInsert(no){
	var paramsI = [];
	var paramsU = [];
	var selectRow = jQuery("#htmlTable"+no).jqGrid("getGridParam", "selarrrow");

	var mealDate = $("#regdate").val();
	if(mealDate == ""){
		alertUI("Please choice meal date.");
		return;
	}

	if(selectRow.length == 0){
		alertUI("데이터를 선택하세요.");
		return;
	}else{
		for(var i = 0; i < selectRow.length; i++){
			var rowId = selectRow[i];

			if(no == "1"){
				if(getColValue("b_menu_type", rowId, "htmlTable1") == ""){
					alertUI("Please select menu.");
					return;
				}
				if(getColValue("b_menu_nm", rowId, "htmlTable1") == ""){
					alertUI("Please enter menu name.");
					return;
				}
			}else if(no == "2"){
				if(getColValue("k_menu_type", rowId, "htmlTable2") == ""){
					alertUI("Please select menu type.");
					return;
				}

				if(getColValue("k_menu_knd", rowId, "htmlTable2") == ""){
					alertUI("Please select meal time.");
					return;
				}

				if(getColValue("k_menu_ko_nm", rowId, "htmlTable2") == ""){
					alertUI("Please enter korean menu name.");
					return;
				}
			}


			if(rowId){
				if(no == "1"){
					if($.trim(getColValue("b_ptt_ymd", rowId, "htmlTable1")) != ""){
						list = {
							b_ptt_ymd   : getColValue("b_ptt_ymd", rowId, "htmlTable1"),
							b_seq_no    : getColValue("b_seq_no", rowId, "htmlTable1"),
							b_menu_type : getColValue("b_menu_type", rowId, "htmlTable1"),
							b_menu_nm   : changeToUni(getColValue("b_menu_nm", rowId, "htmlTable1"))
							//b_menu_sort : getColValue("b_menu_sort", rowId, "htmlTable1")
						};
						paramsU.push(list);
					}else{
						list = {
							b_ptt_ymd   : mealDate,
							b_menu_type : getColValue("b_menu_type", rowId, "htmlTable1"),
							b_menu_nm   : changeToUni(getColValue("b_menu_nm", rowId, "htmlTable1"))
							//b_menu_sort : getColValue("b_menu_sort", rowId, "htmlTable1")
						};
						paramsI.push(list);
					}
				}else if(no == "2"){
					if($.trim(getColValue("k_ptt_ymd", rowId, "htmlTable2")) != ""){
						list = {
							k_ptt_ymd    : getColValue("k_ptt_ymd", rowId, "htmlTable2"),
							k_seq_no     : getColValue("k_seq_no", rowId, "htmlTable2"),
							k_menu_type  : getColValue("k_menu_type", rowId, "htmlTable2"),
							k_menu_knd   : getColValue("k_menu_knd", rowId, "htmlTable2"),
							k_menu_ko_nm : changeToUni(getColValue("k_menu_ko_nm", rowId, "htmlTable2")),
							k_menu_en_nm : changeToUni(getColValue("k_menu_en_nm", rowId, "htmlTable2")),
							k_menu_po_nm : changeToUni(getColValue("k_menu_po_nm", rowId, "htmlTable2"))
							//k_menu_sort  : getColValue("k_menu_sort", rowId, "htmlTable2")
						};
						paramsU.push(list);
					}else{
						list = {
							k_ptt_ymd    : mealDate,
							k_menu_type  : getColValue("k_menu_type", rowId, "htmlTable2"),
							k_menu_knd  : getColValue("k_menu_knd", rowId, "htmlTable2"),
							k_menu_ko_nm : changeToUni(getColValue("k_menu_ko_nm", rowId, "htmlTable2")),
							k_menu_en_nm : changeToUni(getColValue("k_menu_en_nm", rowId, "htmlTable2")),
							k_menu_po_nm : changeToUni(getColValue("k_menu_po_nm", rowId, "htmlTable2"))
							//k_menu_sort  : getColValue("k_menu_sort", rowId, "htmlTable2")
						};
						paramsI.push(list);
					}
				}
			}
		}
	}

	confirmUI("저장 하시겠습니까?");
	$("#pop_yes").click(function(){
		$.unblockUI({
			onUnblock: function(){
				var paramData = {
						paramsG : mealDate,
						paramsI : util.jsonToList(paramsI),
						paramsU	: util.jsonToList(paramsU)
					};
					doCommonAjax("doInsertByMenu"+no+".do", paramData, "submitCallBack('save"+no+"', jsonData.sendResult);");
			}
		});
	});
}

function submitCallBack(gubn, data){
	var no = selectNum(gubn);
	doSearch(no);
}

function doDelete(no){
	var params = [];
	var selectRow = jQuery("#htmlTable"+no).jqGrid("getGridParam", "selarrrow");

	if(selectRow.length == 0){
		alertUI("데이터를 선택하세요.");
		return;
	}else{
		for(var i = 0; i < selectRow.length; i++){
			var rowId = selectRow[i];
			if(no == "1"){
				if(getColValue("b_ptt_ymd", rowId, "htmlTable1") == ""){
					return;
				}
			}else if(no == "2"){
				if(getColValue("k_ptt_ymd", rowId, "htmlTable2") == ""){
					return;
				}
			}

			if(rowId){
				if(no == "1"){
					list ={
						b_ptt_ymd 	: getColValue("b_ptt_ymd", rowId, "htmlTable1"),
						b_seq_no 	: getColValue("b_seq_no", rowId, "htmlTable1")
					};
					params.push(list);
				}else  if(no == "2"){
					list ={
						k_ptt_ymd 	: getColValue("k_ptt_ymd", rowId, "htmlTable2"),
						k_seq_no 	: getColValue("k_seq_no", rowId, "htmlTable2")
					};
					params.push(list);
				}
			}
		}
	}

	confirmUI("삭제 하시겠습니까?");
	$("#pop_yes").click(function(){
		$.unblockUI({
			onUnblock: function(){
				var paramData = {
						paramJson : util.jsonToList(params)
					};
					doCommonAjax("doDeleteByMenu"+no+".do", paramData, "submitCallBack('delete"+no+"', jsonData.sendResult);");
			}
		});
	});
}

function addRow(no){
	var gridRowId = jQuery("#htmlTable"+no).getDataIDs().length;
	jQuery("#htmlTable"+no).jqGrid("addRowData", gridRowId+1, eval("datarow"+no));
}

//cell click event
function cellClickAction(rowid, iCol, cellcontent){
	var regdate = dateConversionKr(trimChar(getColValue("regdate", rowid, "htmlTable0"), "/"));
	$("#regdate").val(regdate);
	doSubSearch('1');
}

function doSubSearch(no){
	var params = {
		b_ptt_ymd : $("#regdate").val(),
		k_ptt_ymd : $("#regdate").val()
	};
	doCommonSearch("doSearchByMenu"+no+".do", util.jsonToString(params), "subSearchCallBack('"+no+"');", eval("gridName"+no));
}

var coffeeFlag = "Y";
function subSearchCallBack(no){
	if(no == "1"){
		fnGridInitCallBack("htmlTable1");
		doSubSearch("2");
	}else if(no == "2"){
		fnGridInitCallBack("htmlTable2");

		if(coffeeFlag == "Y"){
			coffeeFlag = "N";
			doCoffeeSearch();
		}
	}
}

function doCoffeeSearch(){
	var params = {};
	doCommonSearch("doSearchByCoffee.do", util.jsonToString(params), "fnGridInitCallBack('htmlTable3');", gridName3);
}

function doCoffeeInsert(){
	var paramsI = [];
	var paramsU = [];
	var selectRow = jQuery("#htmlTable3").jqGrid("getGridParam", "selarrrow");

	if(selectRow.length == 0){
		alertUI("데이터를 선택하세요.");
		return;
	}else{
		for(var i = 0; i < selectRow.length; i++){
			var rowId = selectRow[i];
			if(getColValue("co_name", rowId, "htmlTable3") == ""){
				alertUI("Please enter coffee name.");
				return;
			}else if(getColValue("co_amt", rowId, "htmlTable3") == ""){
				alertUI("Please enter coffee amount.");
				return;
			}


			if(rowId){
				if($.trim(getColValue("doc_no", rowId, "htmlTable3")) != ""){
					list = {
						doc_no : getColValue("doc_no", rowId, "htmlTable3"),
						co_name : changeToUni(getColValue("co_name", rowId, "htmlTable3")),
						co_amt : changeToUni(getColValue("co_amt", rowId, "htmlTable3").replace(",",".")),
						co_desc : changeToUni(getColValue("co_desc", rowId, "htmlTable3")),
						co_met : changeToUni(getColValue("co_met", rowId, "htmlTable3"))
					};
					paramsU.push(list);
				}else{
					list = {
						co_name : changeToUni(getColValue("co_name", rowId, "htmlTable3")),
						co_amt : changeToUni(getColValue("co_amt", rowId, "htmlTable3").replace(",",".")),
						co_desc : changeToUni(getColValue("co_desc", rowId, "htmlTable3")),
						co_met : changeToUni(getColValue("co_met", rowId, "htmlTable3"))
					};
					paramsI.push(list);
				}
			}
		}
	}

	confirmUI("저장 하시겠습니까?");
	$("#pop_yes").click(function(){
		$.unblockUI({
			onUnblock: function(){
				var paramData = {
						paramsI : util.jsonToList(paramsI),
						paramsU	: util.jsonToList(paramsU)
					};
					doCommonAjax("doInsertByCoffee.do", paramData, "doCoffeeSearch();");
			}
		});
	});
}

function doCoffeeDelete(){
	var params = [];
	var selectRow = jQuery("#htmlTable3").jqGrid("getGridParam", "selarrrow");

	if(selectRow.length == 0){
		alertUI("데이터를 선택하세요.");
		return;
	}else{
		for(var i = 0; i < selectRow.length; i++){
			var rowId = selectRow[i];
			if(getColValue("doc_no", rowId, "htmlTable3") == ""){
				return;
			}

			if(rowId){
				list ={
					doc_no : getColValue("doc_no", rowId, "htmlTable3")
				};
				params.push(list);
			}
		}
	}

	confirmUI("삭제 하시겠습니까?");
	$("#pop_yes").click(function(){
		$.unblockUI({
			onUnblock: function(){
				var paramData = {
						paramJson : util.jsonToList(params)
					};
					doCommonAjax("doDeleteByCoffee.do", paramData, "doCoffeeSearch()");
			}
		});
	});
}

var win;
function fnExcelUpload(gubn){
	if(win != null){ win.close(); }
	var url = "../popup/pop_excelUpload.gas", width = "460", height = "200";

	win = newPopWin("about:blank", width, height, "win_excel");
	document.hideForm.hid_csrfToken.value = $("#csrfToken").val();
	document.hideForm.UPLOAD_TYPE.value = gubn == "excel1" ? "XST19A" : "XST19B";
	document.hideForm.action = url;
	document.hideForm.target = "win_excel";
	document.hideForm.method = "post";
	document.hideForm.submit();
}

</script>