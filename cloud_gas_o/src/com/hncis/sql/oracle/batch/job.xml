<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap      
    PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"      
    "http://ibatis.apache.org/dtd/sql-map-2.dtd">

<sqlMap namespace="job">

	<resultMap id="quartzScheduleListResult" class="ScheduleDto">
    	<result property="id" column="ID" />
    	<result property="typeId" column="TYPEID" />
    	<result property="dependencyScheduleId" column="DEPENDENCYSCHEDULEID" />
	</resultMap>
    
    <!-- ############################################################################ -->
    <!-- # s : 이력관리 -->
    <!-- ############################################################################ -->
    <!-- 작업 목록 -->
    <select id="selectJobList" resultClass="TreeVo">
    	/*selectJobList*/
    	SELECT
		    job_name AS value,
		    job_name AS text, 
		    1 AS leaf
		FROM
		    batch_job_instance
		GROUP BY job_name
    </select>
    
    <!-- 작업상세 목록 갯수 -->
    <select id="selectJobDetailListCount" parameterClass="JobVo" resultClass="Integer">
        /*selectJobDetailListCount*/
    	SELECT
		    COUNT(job_instance_id)
		FROM
		    batch_job_execution
		WHERE
		    job_execution_id IN(
		        SELECT 
		            MAX(b.job_execution_id)
		        FROM
		            batch_job_instance A
		            ,batch_job_execution B
		        WHERE
		            b.job_instance_id = a.job_instance_id
		        AND a.job_name = #jobName#
		        GROUP BY b.job_instance_id 
		    )
		<isNotEmpty property="searchStartTime" prepend="AND">
			start_time <![CDATA[>=]]> CONVERT(DATE, #searchStartTime# + '00:00:00', 120)
		</isNotEmpty>
		<isNotEmpty property="searchEndTime" prepend="AND">
			start_time <![CDATA[<=]]> CONVERT(DATE, #searchEndTime# + '23:59:59', 120)
		</isNotEmpty>
    </select>
    
    <!-- 작업상세 목록 -->
    <select id="selectJobDetailList" parameterClass="JobVo" resultClass="JobDetailVo">
        /*selectJobDetailList*/
    	SELECT
			*
		FROM
			(
			SELECT
				*
			FROM
				(
				SELECT
				    ROW_NUMBER() OVER(ORDER BY b.start_time DESC) AS r_num,
				    a.job_name         AS jobName                         ,
				    b.job_execution_id AS jobExecutionId                  ,
				    b.job_instance_id  AS jobInstanceId                   ,
				    CONVERT(NVARCHAR, b.create_time, 120) AS createTime   ,
				    CONVERT(NVARCHAR, b.start_time, 120)  AS startTime    ,
				    CONVERT(NVARCHAR, b.end_time, 120)    AS endTime      ,
				    b.status    AS status                                 ,
				    b.exit_code AS exitCode
				FROM
				    batch_job_instance  a, 
				    batch_job_execution b 
				WHERE
				    b.job_instance_id = a.job_instance_id
				AND b.job_execution_id IN (
				        SELECT 
				            MAX(b.job_execution_id)
				        FROM
				            batch_job_instance a,
				            batch_job_execution b
				        WHERE
				            b.job_instance_id = a.job_instance_id
				        AND a.job_name = #jobName#
				        GROUP BY b.job_instance_id 
				    )
				<isNotEmpty property="searchStartTime" prepend="AND">
				    b.start_time <![CDATA[>=]]> CONVERT(DATE, #searchStartTime# + '00:00:00', 120)
				</isNotEmpty>
				<isNotEmpty property="searchEndTime" prepend="AND">
				    b.start_time <![CDATA[<=]]> CONVERT(DATE, #searchEndTime# + '23:59:59', 120)
				</isNotEmpty>
				ORDER BY b.start_time DESC
				) temp1
			) temp2
		WHERE
			temp2.R_NUM <![CDATA[>=]]> #start# AND temp2.R_NUM <![CDATA[<]]> #end#
    </select>
    
    <!-- 작업상세스텝 목록 -->
    <select id="selectJobStepList" parameterClass="JobDetailStepVo" resultClass="JobDetailStepVo">
        /*selectJobStepList*/
		SELECT
		     b.step_execution_id AS stepExecutionId  ,
		     b.step_name AS stepName                 ,
		     CONVERT(DATE, b.START_TIME, 120) AS startTime ,
		     CONVERT(DATE, b.END_TIME,   120) AS endTime   ,
		     b.status       AS status                ,
		     b.commit_count AS commitCount           ,
		     b.read_count   AS readCount             ,
		     b.write_count  AS writeCount            ,
		     b.exit_code    AS exitCode
		FROM
		    batch_job_execution a,
		    batch_step_execution b
		WHERE
		    b.job_execution_id = a.job_execution_id
		AND a.job_execution_id = #jobExecutionId#
    </select>

    <!-- 작업상세스텝 상세 -->
    <select id="selectJobStep" parameterClass="JobDetailStepVo" resultClass="JobDetailStepVo">
        /*selectJobStep*/
		SELECT
		    step_execution_id AS stepExecutionId        ,
		    step_name         AS stepName               ,
		    CONVERT(DATE, start_time, 121) AS startTime ,
		    CONVERT(DATE, end_time,   121) AS endTime   ,
		    status       AS status                      ,
		    commit_count AS commitCount                 ,
		    read_count   AS readCount                   ,
		    write_count  AS writeCount                  ,
		    read_skip_count  AS readSkipCount           ,
		    write_skip_count AS writeSkipCount          ,
		    rollback_count   AS rollbackCount           ,
		    exit_code    AS exitCode                    ,
		    exit_message AS exitMessage
		FROM
		    batch_step_execution
		WHERE
		    step_execution_id = #stepExecutionId#
    </select>

	<!-- 작업 파라메터 목록 -->
	<select id="selectJobParamsList" parameterClass="JobVo" resultClass="JobParamsVo">
	    /*selectJobParamsList*/
		SELECT
			key_name    AS keyName,
			string_val AS stringVal
		FROM
			batch_job_params
		WHERE
			job_instance_id = #jobInstanceId#
	</select>

	<!-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ -->
	<!-- # s : 배치 기존작업 상태변경 (배치를 수동으로 다시 돌리기위한 수정) -->
	<update id="updateClearJob" parameterClass="JobVo">
	    /*updateClearJob*/
		UPDATE batch_job_execution SET
			status       = 'FAILED'  , 
			end_time     = getdate() , 
			exit_code    = ''     , 
			exit_message = ''
		WHERE 
			job_instance_id = #jobInstanceId#
	</update>
	
	<update id="updateClearJobContext" parameterClass="JobVo">
	    /*updateClearJobContext*/
		UPDATE batch_job_execution_context SET
			short_context = '{"map":""}'
		WHERE
			EXISTS(
				SELECT
					b.job_execution_id
				FROM
					batch_job_execution b
				WHERE
					b.job_instance_id = #jobInstanceId#
				AND b.job_execution_id = job_execution_id
			)
	</update>
	
	<update id="updateClearJobStep" parameterClass="JobVo">
	   /*updateClearJobStep*/
	   UPDATE batch_step_execution SET
			status       = 'FAILED' ,
			commit_count = 0        ,
			read_count   = 0        ,
			filter_count = 0        ,
			write_count  = 0        ,
			read_skip_count    = 0  ,
			write_skip_count   = 0  ,
			process_skip_count = 0  ,
			rollback_count     = 0  ,
			end_time           = getdate() ,
			exit_message = ''       ,
			exit_code    = ''
		WHERE
			EXISTS(
				SELECT
					b.job_execution_id
				FROM
					batch_job_execution b
				WHERE
					b.job_instance_id = #jobInstanceId#
				AND b.job_execution_id = job_execution_id
			)
	</update>
	
	<update id="updateClearJobStepContext" parameterClass="JobVo">
	    /*updateClearJobStepContext*/
		UPDATE batch_step_execution_context SET
			short_context = '{"map":""}'
		WHERE
			EXISTS(
				SELECT
					b.job_execution_id
				FROM
					batch_job_execution b,
					batch_step_execution c
				WHERE
					b.job_instance_id = #jobInstanceId#
				AND b.job_execution_id = c.job_execution_id
				AND c.step_execution_id = step_execution_id
			)
	</update>
	<!-- # e : 배치 기존작업 상태변경 (배치를 수동으로 다시 돌리기위한 수정) -->
	<!-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ -->
	<!-- ############################################################################ -->
    <!-- # e : 이력관리 -->
    <!-- ############################################################################ -->

	<!-- ############################################################################ -->
    <!-- # s : 스케줄관리 -->
    <!-- ############################################################################ -->
	<!-- 스케줄 목록 -->
	<select id="selectScheduleList" resultClass="ScheduleJobVo">
	      /*selectScheduleList*/
          SELECT
			id          AS id    ,
			job_id      AS jobId ,
			type_id     AS typeId,
			description AS description, 
			SUBSTR(CONVERT(VARCHAR, use_start_date, 120), 1, 10) AS useStartDate,
			SUBSTR(CONVERT(VARCHAR, use_end_date,   120), 1, 10) AS useEndDate  ,
			val    AS val  ,
			use_yn AS useYn,
			CASE 
			  WHEN type_id = '1' THEN '한번'
			  WHEN type_id = '2' THEN '매일'
			  WHEN type_id = '3' THEN '매월'
			  WHEN type_id = '4' THEN '매배치시'
			  WHEN type_id = '5' THEN '종속배치'
		    END AS typeName,
			dependency_schedule_id AS dependencyScheduleId,
			restart_yn             AS restartYn           ,
			restart_count          AS restartCount        ,
			restart_time           AS restartTime
		FROM
			hmb_job_schedule
		ORDER BY use_start_date DESC
	</select>
	
	<!-- 스케줄 상세 -->
	<select id="selectSchedule" parameterClass="ScheduleJobVo" resultClass="ScheduleJobVo">
		/*selectSchedule*/
		SELECT 
			id                     AS id                   , 
			job_id                 AS jobId                ,
			type_id                AS typeId               ,
			dependency_schedule_id AS dependencyScheduleId ,
			restart_yn    AS restartYn   ,
			restart_count AS restartCount,
			restart_time  AS restartTime
		FROM
			hmb_job_schedule
		WHERE
			id = #id#
	</select>

	<!-- 스케줄 파라메터 목록 -->
	<select id="selectScheduleParamsList" parameterClass="ScheduleJobVo" resultClass="ScheduleJobParamsVo">
		/*selectScheduleParamsList*/
		SELECT
			 a.id          AS id
			,a.schedule_id AS scheduleId
			,a.type        AS type
			,a.val         AS val
			,(SELECT val FROM hmb_job_info_params WHERE job_id = #jobId# AND id = a.id) AS defaultVal
			,a.auto_increment_yn AS autoIncrementYn
		FROM
			hmb_job_schedule_params a
		WHERE
			a.schedule_id = #id#
		UNION
		SELECT 'input.default' AS id,
		       #id#            AS scheduleId,
		       'default'       AS type,
		       REPLACE(REPLACE(REPLACE(CONVERT(NVARCHAR, getdate(), 120),'-',''),':',''),' ','') AS val,
		       ''              AS defaultVal,
		      'N'              AS autoIncrementYn
	</select>
	
	<!-- 종속배치 목록 -->
	<select id="selectDependencyScheduleList" parameterClass="ScheduleJobVo" resultClass="ScheduleJobVo">
	    /*selectDependencyScheduleList*/
		SELECT
			 id AS id
			,description AS description
			,use_yn AS useYn
		FROM
			hmb_job_schedule
		WHERE
			type_id = '5'
		<isNotEmpty property="useYn" prepend="AND">
			use_yn = #useYn#
		</isNotEmpty>
	</select>
	
	<!-- 스케줄 다음 순번 -->
	<select id="selectScheduleNextId" resultClass="Integer">
	    /*selectScheduleNextId*/
		SELECT
			NVL(MAX(id), 0) + 1
		FROM
			hmb_job_schedule
	</select>
	
	<!-- 스케줄 등록 -->
	<insert id="insertSchedule" parameterClass="ScheduleJobVo">
	    /*insertSchedule*/
		INSERT INTO hmb_job_schedule (
			 id
			,job_id
			,type_id
			,description
			,use_start_date
			,use_end_date
			,val
			,use_yn
			,dependency_schedule_id
			,restart_yn
			,restart_count
			,restart_time
			,create_date
		) VALUES (
			#id#
			,#jobId#
			,#typeId#
			,#description#
			,CONVERT(DATE, #useStartDate#)
			,CONVERT(DATE, #useEndDate#)
			,#val#
			,#useYn#
			,#dependencyScheduleId#
			,#restartYn#
			,#restartCount#
			,#restartTime#
			,REPLACE(SUBSTR(CONVERT(NVARCHAR, getDate(), 20), 1, 10), '-', '') 
		)
	</insert>
	
	<!-- 스케줄 수정 -->
	<update id="updateSchedule" parameterClass="ScheduleJobVo">
	    /*updateSchedule*/
		UPDATE hmb_job_schedule SET 
			 job_id                 = #jobId#
			,type_id                = #typeId#
			,description            = #description#
			,use_start_date         = CONVERT(DATE, #useStartDate#)
			,use_end_date           = CONVERT(DATE, #useEndDate#)
			,val                    = #val#
			,use_yn                 = #useYn#
			,dependency_schedule_id = #dependencyScheduleId#
			,restart_yn             = #restartYn#
			,restart_count          = #restartCount#
			,restart_time           = #restartTime#
			,update_date            = REPLACE(REPLACE(REPLACE(CONVERT(NVARCHAR, getdate(), 120),'-',''),':',''),' ','')
		WHERE 
			id = #id#
	</update>
	
	<!-- 스케줄 삭제 -->
	<delete id="deleteSchedule" parameterClass="ScheduleJobVo">
	    /*deleteSchedule*/
		DELETE FROM
			hmb_job_schedule
		WHERE
			id = #id#
	</delete>
	
	<!-- 스케줄 파라메터 등록 -->
	<insert id="insertScheduleParams" parameterClass="ScheduleJobParamsVo">
	    /*insertScheduleParams*/
		INSERT INTO hmb_job_schedule_params(
			 id
			,schedule_id
			,val
			,type
			,auto_increment_yn
			,create_date
		)VALUES(
			#id#
			,#scheduleId#
			,#val#
			,#type#
			,#autoIncrementYn#
			,REPLACE(REPLACE(REPLACE(CONVERT(NVARCHAR, getdate(), 120),'-',''),':',''),' ','')
		)
	</insert>
	
	<!-- 스케줄 파라메터 전체삭제 -->
	<delete id="deleteScheduleParams" parameterClass="ScheduleJobVo">
	    /*deleteScheduleParams*/
		DELETE FROM
			hmb_job_schedule_params
		WHERE
			schedule_id = #id#
	</delete>
	
	<!-- 스케줄 파라메터 수정 -->
	<update id="updateScheduleParams" parameterClass="ScheduleJobParamsVo">
	    /*updateScheduleParams*/
		UPDATE hmb_job_schedule_params SET
			 val = #val#
			<!--  ,update_date = REPLACE(REPLACE(REPLACE(CONVERT(NVARCHAR, getdate(), 120),'-',''),':',''),' ','')-->
			,update_date = getdate()
		WHERE
			id = #id#
		AND schedule_id = #scheduleId#
	</update>
	<!-- ############################################################################ -->
    <!-- # e : 스케줄관리 -->
    <!-- ############################################################################ -->
    
    <!-- ############################################################################ -->
    <!-- # s : 기본정보관리 -->
    <!-- ############################################################################ -->
	<!-- 스케줄 Job 기본정보 목록 -->
	<select id="selectJobInfoList" parameterClass="ScheduleJobInfoVo" resultClass="ScheduleJobInfoVo">
	    /*selectJobInfoList*/
		SELECT
			 id          AS id
			,description AS description
			,use_yn      AS useYn
		FROM
			hmb_job_info
		WHERE
			1 = 1
		<isNotEmpty property="useYn" prepend="AND">
			use_yn = #useYn#
		</isNotEmpty>
	</select>
	
	<!-- 스케줄 Job 기본정보 파라메터 목록  -->
	<select id="selectJobInfoParamsList" parameterClass="ScheduleJobInfoParamsVo" resultClass="ScheduleJobInfoParamsVo">
		/*selectJobInfoParamsList*/
		SELECT
			 id                AS id
			,job_id            AS jobId
			,val               AS val
			,type              AS type
			,auto_increment_yn AS autoIncrementYn
			,description       AS description
			,use_yn            AS useYn
		FROM
			hmb_job_info_params
		WHERE
			JOB_ID = #jobId#
		<isNotEmpty property="useYn" prepend="AND">
			USE_YN = #useYn#
		</isNotEmpty>
		ORDER BY ID ASC
	</select>
	
	<!-- 스케줄 Job 기본정보를 사용중인 스케줄의 갯수 -->
	<select id="selectJobInfoUseCount" parameterClass="ScheduleJobInfoVo" resultClass="Integer">
		/*selectJobInfoUseCount*/
		SELECT
			NVL(COUNT(id), 0)
		FROM
			hmb_job_schedule
		WHERE
			job_id = #id#
	</select>
	
	<!-- 스케줄 Job 기본정보 등록 -->
	<insert id="insertJobInfo" parameterClass="ScheduleJobInfoVo">
		/*insertJobInfo*/
		INSERT INTO hmb_job_info(
			id
			,description
			,use_yn
			,create_date
		)VALUES(
			#id#
			,#description#
			,#useYn#
			,REPLACE(REPLACE(REPLACE(CONVERT(NVARCHAR, getdate(), 120),'-',''),':',''),' ','')
		)
	</insert>
	
	<!-- 스케줄 Job 기본정보 수정 -->
	<update id="updateJobInfo" parameterClass="ScheduleJobInfoVo">
		/*updateJobInfo*/
		UPDATE hmb_job_info SET
			description = #description#
			,use_yn = #useYn#
		WHERE
			id = #id#
	</update>
	
	<!-- 스케줄 Job 기본정보 삭제 -->
	<delete id="deleteJobInfo" parameterClass="ScheduleJobInfoVo">
		/*deleteJobInfo*/
		DELETE FROM
			hmb_job_info
		WHERE
			id = #id#
	</delete>
	
	<!-- 스케줄 Job 기본정보 파라메터 등록 -->
	<insert id="insertJobInfoParams" parameterClass="ScheduleJobInfoParamsVo">
		/*insertJobInfoParams*/
		INSERT INTO hmb_job_info_params (
			id
			,job_id
			,val
			,type
			,description
			,use_yn
			,auto_increment_yn
			,create_date
		)VALUES(
			#id#
			,#jobId#
			,#val#
			,#type#
			,#description#
			,#useYn#
			,#autoIncrementYn#
			,REPLACE(REPLACE(REPLACE(CONVERT(NVARCHAR, getdate(), 120),'-',''),':',''),' ','')
		)
	</insert>
	
	<!-- 스케줄 Job 기본정보 파라메터 전체삭제 -->
	<delete id="deleteJobInfoParams" parameterClass="ScheduleJobInfoVo">
		/*deleteJobInfoParams*/
		DELETE FROM
			hmb_job_info_params
		WHERE
			job_id = #id#
	</delete>
    <!-- ############################################################################ -->
    <!-- # e : 기본정보관리 -->
    <!-- ############################################################################ -->
    
    <!-- ############################################################################ -->
    <!-- # s : Quartz 작업 -->
    <!-- ############################################################################ -->
    <!-- 일 배치 목록 -->
	<select id="selectQuartzScheduleDailyList" parameterClass="ScheduleDto" resultMap="quartzScheduleListResult">
		/*selectQuartzScheduleDailyList*/
		SELECT
			id, 
			type_id AS typeId,
			dependency_schedule_id AS dependencyScheduleId
		FROM
		    hmb_job_schedule
		WHERE
		    use_start_date <![CDATA[<=]]> #nowDate#
		AND use_end_date <![CDATA[>=]]> #nowDate#
		AND use_yn = 'Y'
		AND type_id IN ('2', '4')
		AND (val IS NULL OR VAL = #val#)
		UNION
		SELECT
			id, 
			type_id AS typeId,
			dependency_schedule_id AS dependencyScheduleId
		FROM
		    hmb_job_schedule
		WHERE
		    type_id = '1'
		UNION
		SELECT
			id, 
			type_id AS typeId,
			dependency_schedule_id AS dependencyScheduleId
		FROM
		    hmb_job_schedule
		WHERE type_id = '3'
		AND use_start_date = #nowDate#
		AND use_yn = 'Y'
		AND val = #val#		   
	</select>

	<!-- 월 배치 목록 -->
	<select id="selectQuartzScheduleMonthlyList" parameterClass="ScheduleDto" resultMap="quartzScheduleListResult">
		/*selectQuartzScheduleMonthlyList*/
		SELECT
			id
		FROM
		    hmb_job_schedule
		WHERE
		    use_start_date <![CDATA[<=]]> #nowDate#
		AND use_end_date <![CDATA[>=]]> #nowDate#
		AND use_yn = 'Y'
		AND type_id = '3'
		AND val = #val#	
	</select>
	<!-- ############################################################################ -->
    <!-- # e : Quartz 작업 -->
    <!-- ############################################################################ -->
    
    <!--  잡스케줄 type_id update -->
	<update id="updateJobSchedule" parameterClass="HncisJobSchedule">
	  /*updateJobSchedule*/
	  UPDATE hmb_job_schedule
		SET
			type_id = #type_id#
        WHERE 1=1
          AND id = #id#
	</update>	
	
	<!--  잡스케줄 use_start_date update -->
	<update id="updateJobScheduleForMonth" parameterClass="ScheduleJobVo">
	  /*updateJobScheduleForMonth*/
	  UPDATE hmb_job_schedule
		SET
			use_start_date = #useStartDate#
        WHERE 1=1
          AND id = #id#
	</update>	
	
	<!--  처리건수 update -->
	<update id="updateJobCnt" parameterClass="JobVo">
	  /*updateJobCnt*/
	  UPDATE batch_job_execution
		SET
			iptCnt = #iptCnt#,
			uptCnt = #uptCnt#
      WHERE job_instance_id = #jobInstanceId#
	</update>
	
	<!--  처리건수 select -->
	<select id="selectJobCnt" parameterClass="JobVo" resultClass="Integer">
		/*selectJobCnt*/
		SELECT iptCnt FROM batch_job_execution
		WHERE job_instance_id = #jobInstanceId#
	</select>

</sqlMap>
