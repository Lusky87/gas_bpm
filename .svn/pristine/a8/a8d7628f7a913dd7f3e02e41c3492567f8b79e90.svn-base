<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:batch="http://www.springframework.org/schema/batch"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:lang="http://www.springframework.org/schema/lang"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
        http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-2.5.xsd
        http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-2.0.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd">
        
    
    <!-- ###################### web application bean import 설정 start ########################## -->
    <!-- 
    <import resource="applicationContext.xml"/>
    <import resource="quartz.xml"/>
    -->
    <!-- ###################### web application bean import 설정 end   ########################## -->
    
     <!-- ###################### batch jobRepository jobLauncher 설정 start ###################### -->
    <bean class="org.springframework.batch.core.configuration.support.JobRegistryBeanPostProcessor"> 
		<property name="jobRegistry" ref="jobRegistry"/> 
	</bean> 
	
	<bean id="jobRegistry" class="org.springframework.batch.core.configuration.support.MapJobRegistry" />
	
    <bean id="jobRepository"
        class="org.springframework.batch.core.repository.support.JobRepositoryFactoryBean">
        <property name="transactionManager" ref="transactionManager" />
        <property name="databaseType" value="sqlserver" />
        <property name="dataSource" ref="dataSource" />
        <property name="isolationLevelForCreate" value="ISOLATION_DEFAULT "></property>
        <!--property name="isolationLevelForCreate" value="READ_COMMITTED "></property-->
        <!--property name="isolationLevelForCreate" value="ISOLATION_READ_UNCOMMITTED "></property-->
    </bean>
    
    <bean id="jobLauncher"
        class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
        <property name="jobRepository" ref="jobRepository" />
        <property name="taskExecutor">
			<bean class="org.springframework.core.task.SimpleAsyncTaskExecutor" />
		</property>
    </bean>
    
     <bean id="simpleStep"  class="org.springframework.batch.core.step.item.SimpleStepFactoryBean" > 
        <description>step parent</description>
        <property name="transactionManager" ref="transactionManager" /> 
        <property name="jobRepository" ref="jobRepository" /> 
        <property name="commitInterval" value="1" /> 
        <property name="allowStartIfComplete" value="true" /> 
    </bean>
    
    <bean id="db2InsaFileItemReader" class="org.springframework.batch.item.file.FlatFileItemReader">
        <property name="encoding" value="euc-kr" />
        <!-- <property name="resource" value="file:/export/home/plas/batch/data_files/basic/#{jobParameters['input.file.date']}_org_ktk.sam" /> -->
        <property name="lineMapper">
            <bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
                <property name="lineTokenizer">
                    <bean
                        class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
                        <property name="delimiter" value="|" />
                    </bean>
                </property>
                <property name="fieldSetMapper" ref="bgabGascz002DtoRowMapper" />
            </bean>
        </property>
        <property name="recordSeparatorPolicy">
            <bean class="com.hncis.batch.mapper.BlankLineRecordSeparatorPolicy"/>
        </property>        
    </bean>
    
    <!-- ================================================================================ -->
    <!-- 사용자(bgab_gascz002) 생성 배치 START -->
    <!-- ================================================================================ -->
    <batch:job id="userCreate">
        <batch:step id="userCreate01Step" parent="simpleStep">
            <batch:tasklet>
            	<batch:listeners>
                    <batch:listener ref="userCreate01DataSourceReader"/>
                    <batch:listener ref="userCreate01Processor"/>
                </batch:listeners>
                <batch:chunk reader="userCreate01ItemReaderAdaptor" writer="userCreate01Writer">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
	</batch:job>
	
	<bean id="userCreate01ItemReaderAdaptor" class="org.springframework.batch.item.adapter.ItemReaderAdapter">
        <property name="targetObject" ref="userCreate01DataSourceReader" />
        <property name="targetMethod" value="read" />
    </bean>
    
    <bean id="userCreate01Writer"
        class="org.springframework.batch.item.adapter.ItemWriterAdapter">
        <property name="targetObject" ref="userCreate01Processor" />
        <property name="targetMethod" value="process" />
    </bean>
    
    <bean id="userCreate01JdbcItemReader" class="org.springframework.batch.item.database.JdbcCursorItemReader">
        <property name="dataSource" ref="dataSource" />
        <property name="rowMapper" ref="bgabGascI001DtoRowMapper" />
        <property name="sql">
            <value>
            <![CDATA[
				SELECT  
					USN
					,USR_NM
					,DPRTMT_CD
					,DPRTMT_NM
					,JOB_TITL_CD
					,JOB_TITL_NM
					,EMAIL
					,CMPNY_CD
					,CMPNY_NM
					,MP_NUM
					,CONVERT(INT, NVL(WRKPLC_CD, '1')) AS WRKPLC_CD
					,WRKPLC_NM
					,TITLE_CD
					,TITLE_NM
					,CC_CD
					,CC_NM
					,WORK_YN
					,CASE
						WHEN
							(SELECT COUNT(*) FROM BGAB_GASCZ008$corp_cd$ WHERE ORGA_C = A.DPRTMT_CD AND EMPNO = A.USN) > 0 THEN '2'
					    ELSE
						'1'
					 END AS CNFM_AUTH
					,(SELECT XORG_ORGA_CSNER FROM BGAB_GASCZ003 WHERE XORG_ORGA_C = A.DPRTMT_CD) AS UP_DPRTMT_CD
					,STREET
					,HOUSE
					,APTMT
					,CITY
					,DISTRICT
					,POSTAL_CODE
					,WORK_PHONE_NO
					,BENEFIT_PLAN_CD
					,WORK_SCHEDULE_CD
					,BENEFIT_PLAN_NM
					,WORK_SCHEDULE_NM
				FROM BGAB_GASCI001 A
            ]]>
            </value>
        </property>
    </bean>    
    <!-- ================================================================================ -->
    <!-- 사용자(bgab_gascz002) 생성 배치 END -->
    <!-- ================================================================================ -->
    
    <!-- ================================================================================ -->
    <!-- 조직(bgab_gascz003) 생성 배치 START -->
    <!-- ================================================================================ -->
    <batch:job id="orgCreate">
        <batch:step id="orgCreate01Step" parent="simpleStep">
            <batch:tasklet>
            	<batch:listeners>
                    <batch:listener ref="orgCreate01DataSourceReader"/>
                    <batch:listener ref="orgCreate01Processor"/>
                </batch:listeners>
                <batch:chunk reader="orgCreate01ItemReaderAdaptor" writer="orgCreate01Writer">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
	</batch:job>
	
	<bean id="orgCreate01ItemReaderAdaptor" class="org.springframework.batch.item.adapter.ItemReaderAdapter">
        <property name="targetObject" ref="orgCreate01DataSourceReader" />
        <property name="targetMethod" value="read" />
    </bean>
    
    <bean id="orgCreate01Writer"
        class="org.springframework.batch.item.adapter.ItemWriterAdapter">
        <property name="targetObject" ref="orgCreate01Processor" />
        <property name="targetMethod" value="process" />
    </bean>
    
    <bean id="orgCreate01JdbcItemReader" class="org.springframework.batch.item.database.JdbcCursorItemReader">
        <property name="dataSource" ref="dataSource" />
        <property name="rowMapper" ref="bgabGascI002DtoRowMapper" />
        <property name="sql">
            <value>
            <![CDATA[
				SELECT  
					DEPT_ID               ,
					DEPT_NM               ,
					UPR_DEPT_ID			  ,
					MNGR_JOB_TITL_CD      ,
					MNGR_JOB_TITL_NM      ,
					MNGR_USN			  ,
					MNGR_NM               ,
					CONVERT(INT, NVL(WRKPLC_CD, '1')) AS WRKPLC_CD	,
					WRKPLC_NM             ,
					CORP_CD               ,
					CORP_NM               ,
					CONVERT(INT, CONVERT(NVARCHAR, DEPT_LV)) AS DEPT_LV	,
					DEPT_LV_NM     		  ,
					NVL(CLOS_D, '99999999') AS CLOS_D       
				FROM BGAB_GASCI002
            ]]>
            </value>
        </property>
    </bean>    
    <!-- ================================================================================ -->
    <!-- 조직(bgab_gascz003) 생성 배치 END -->
    <!-- ================================================================================ -->
    
    <!-- ================================================================================ -->
    <!-- 결재판(bgab_gascz008) 생성 배치 START -->
    <!-- ================================================================================ -->
    <batch:job id="approvalCreate">
        <batch:step id="approvalCreate01Step" parent="simpleStep">
            <batch:tasklet>
            	<batch:listeners>
                    <batch:listener ref="approvalCreate01DataSourceReader"/>
                    <batch:listener ref="approvalCreate01Processor"/>
                </batch:listeners>
                <batch:chunk reader="approvalCreate01ItemReaderAdaptor" writer="approvalCreate01Writer">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
	</batch:job>
	
	<bean id="approvalCreate01ItemReaderAdaptor" class="org.springframework.batch.item.adapter.ItemReaderAdapter">
        <property name="targetObject" ref="approvalCreate01DataSourceReader" />
        <property name="targetMethod" value="read" />
    </bean>
    
    <bean id="approvalCreate01Writer"
        class="org.springframework.batch.item.adapter.ItemWriterAdapter">
        <property name="targetObject" ref="approvalCreate01Processor" />
        <property name="targetMethod" value="process" />
    </bean>
    
    <bean id="approvalCreate01JdbcItemReader" class="org.springframework.batch.item.database.JdbcCursorItemReader">
        <property name="dataSource" ref="dataSource" />
        <property name="rowMapper" ref="bgabGascZ003DtoRowMapper" />
        <property name="sql">
            <value>
            <![CDATA[
				WITH CTE_TABLE(XORG_ORGA_E, XORG_ORGA_C, XORG_DEPT_LV, SORT, XORG_RSPS_I, XORG_RSPS_M, XORG_RSPS_CRANK, XORG_RSPS_MRANK, XORG_ORGA_CSNER, XORG_CRD_I, XORG_CRD_M )
				AS
				(
				       SELECT 
				              XORG_ORGA_E, 
				              XORG_ORGA_C, 
				              XORG_DEPT_LV,
				              CONVERT(VARCHAR(255), A.XORG_ORGA_E + ' > ') ,
				              XORG_RSPS_I, XORG_RSPS_M, XORG_RSPS_CRANK, XORG_RSPS_MRANK, XORG_ORGA_CSNER,
				              NVL(XORG_CRD_I,''), NVL(XORG_CRD_M,'')
				       FROM dbo.BGAB_GASCZ003$corp_cd$ A
				       WHERE A.XORG_ORGA_C = '60000001'
				       UNION ALL
				       SELECT 
					       M.XORG_ORGA_E,
					       M.XORG_ORGA_C, 
					       M.XORG_DEPT_LV, 
					       CONVERT(VARCHAR(255), RTRIM(Sort) + ' >    ' + M.XORG_ORGA_E) ,
					       M.XORG_RSPS_I, M.XORG_RSPS_M, M.XORG_RSPS_CRANK, M.XORG_RSPS_MRANK, M.XORG_ORGA_CSNER,
					       NVL(M.XORG_CRD_I,''),  NVL(M.XORG_CRD_M,'')
				       FROM dbo.BGAB_GASCZ003$corp_cd$ M 
				       JOIN CTE_TABLE N 
				       ON M.XORG_ORGA_CSNER = N.XORG_ORGA_C
				       WHERE NVL(M.XORG_CLOS_D, '99999999') >= CONVERT(NVARCHAR, getDate(), 112)
				)
				SELECT  XORG_ORGA_C, XORG_ORGA_E, XORG_RSPS_I, XORG_RSPS_M, XORG_RSPS_CRANK, XORG_RSPS_MRANK, XORG_ORGA_CSNER, XORG_DEPT_LV, XORG_CRD_I, XORG_CRD_M
				 FROM CTE_TABLE
				 WHERE XORG_DEPT_LV < 5
				ORDER BY SORT
            ]]>
            </value>
        </property>
    </bean>    
    <!-- ================================================================================ -->
    <!-- 결재판(bgab_gascz008) 생성 배치 END -->
    <!-- ================================================================================ -->
    
    
    <!-- ================================================================================ -->
    <!-- A/S 대상 차량 메일 발송 배치 START  -->
    <!-- ================================================================================ -->
    <batch:job id="asVehiclesMail">
        <batch:step id="asVehiclesMail01Step" parent="simpleStep">
            <batch:tasklet>
            	<batch:listeners>
                    <batch:listener ref="asVehiclesMail01DataSourceReader"/>
                    <batch:listener ref="asVehiclesMail01Processor"/>
                </batch:listeners>
                <batch:chunk reader="asVehiclesMail01ItemReaderAdaptor" writer="asVehiclesMail01Writer">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
	</batch:job>
	
	<bean id="asVehiclesMail01ItemReaderAdaptor" class="org.springframework.batch.item.adapter.ItemReaderAdapter">
        <property name="targetObject" ref="asVehiclesMail01DataSourceReader" />
        <property name="targetMethod" value="read" />
    </bean>
    
    <bean id="asVehiclesMail01Writer"
        class="org.springframework.batch.item.adapter.ItemWriterAdapter">
        <property name="targetObject" ref="asVehiclesMail01Processor" />
        <property name="targetMethod" value="process" />
    </bean>
    
    <bean id="asVehiclesMail01JdbcItemReader" class="org.springframework.batch.item.database.JdbcCursorItemReader">
        <property name="dataSource" ref="dataSource" />
        <property name="rowMapper" ref="asVehiclesDtoRowMapper" />
        <property name="sql">
            <value>
            <![CDATA[
				SELECT 	XX.CAR_NO AS CAR_NO
						,XX.CHSS_NO AS CHSS_NO
						,XX.CRGR_EENO AS CRGR_EENO
						,XX.FXT_INS_INFM_NOS AS FXT_INS_INFM_NOS
						,XX.AS_TYPE AS AS_TYPE
						,CASE
							WHEN (C.XUSR_MAIL_ADR='' OR C.XUSR_MAIL_ADR = NULL) THEN C.XUSR_EMPNO+'@HYUNDAI-BRASIL.COM'
							ELSE XUSR_MAIL_ADR
						END EENO_EMAIL
				FROM
				(
				SELECT 	A.CAR_NO AS CAR_NO
						,A.CHSS_NO AS CHSS_NO
						,CASE 
							WHEN (A.CRGR_EENO=NULL OR A.CRGR_EENO='') 
							THEN 
							(
								SELECT T.XDSM_EMPNO AS XDSM_EMPNO
								FROM
								(
									SELECT 	ROW_NUMBER() OVER (ORDER BY XDSM_MGMT_SCN_CD ASC,XDSM_EMPNO ASC) RNUM
											,XDSM_EMPNO
									FROM BGAB_GASCZ007$corp_cd$
									WHERE XDSM_GUBN2='001BV'
								 )T
								 WHERE T.RNUM=1		
							)
							ELSE A.CRGR_EENO
						END CRGR_EENO
						,DATEDIFF(YY,A.ASST_RGS_YMD,GETDATE()) AS FXT_INS_INFM_NOS
						,'Y' AS AS_TYPE
				FROM BGAB_GASCBV01$corp_cd$ A
				WHERE SUBSTR(A.ASST_RGS_YMD,5,4) = SUBSTR(CONVERT(NVARCHAR, GETDATE() ,112),5,4)
				AND	  SUBSTR(A.ASST_RGS_YMD,1,4) != SUBSTR(CONVERT(NVARCHAR, GETDATE() ,112),1,4)
				)XX
				LEFT OUTER JOIN BGAB_GASCZ002$corp_cd$ C
				ON C.XUSR_EMPNO=XX.CRGR_EENO
				UNION
				SELECT 	XX.CAR_NO AS CAR_NO
						,XX.CHSS_NO AS CHSS_NO
						,XX.CRGR_EENO AS CRGR_EENO
						,XX.FXT_INS_INFM_NOS AS FXT_INS_INFM_NOS
						,XX.AS_TYPE AS AS_TYPE
						,CASE
							WHEN (C.XUSR_MAIL_ADR='' OR C.XUSR_MAIL_ADR = NULL) THEN C.XUSR_EMPNO+'@HYUNDAI-BRASIL.COM'
							ELSE XUSR_MAIL_ADR
						END EENO_EMAIL
				FROM
				(
				SELECT 	X.CAR_NO AS CAR_NO
						,X.CHSS_NO AS CHSS_NO
						,CASE 
							WHEN (X.CRGR_EENO=NULL OR X.CRGR_EENO='') 
							THEN 
							(
								SELECT T.XDSM_EMPNO AS XDSM_EMPNO
								FROM
								(
									SELECT 	ROW_NUMBER() OVER (ORDER BY XDSM_MGMT_SCN_CD ASC,XDSM_EMPNO ASC) RNUM
											,XDSM_EMPNO
									FROM BGAB_GASCZ007$corp_cd$
									WHERE XDSM_GUBN2='001BV'
								 )T
								 WHERE T.RNUM=1		
							)
							ELSE X.CRGR_EENO
						END CRGR_EENO
						,X.FNH_TRVG_DIST AS FXT_INS_INFM_NOS
						,'M' AS AS_TYPE
				FROM
				(
					SELECT 	B.CAR_NO AS CAR_NO
							,B.CHSS_NO AS CHSS_NO
							,B.CRGR_EENO AS CRGR_EENO
							,A.FNH_TRVG_DIST/10000 AS FNH_TRVG_DIST
							,NVL(B.FXT_INS_INFM_NOS,0) AS FXT_INS_INFM_NOS
					FROM BGAB_GASCBV02$corp_cd$ A
					LEFT OUTER JOIN BGAB_GASCBV01$corp_cd$ B
					ON A.CHSS_NO=B.CHSS_NO
					WHERE A.FNH_TRVG_DIST >= 10000
				)X
				WHERE X.FNH_TRVG_DIST > X.FXT_INS_INFM_NOS
				)XX
				LEFT OUTER JOIN BGAB_GASCZ002$corp_cd$ C
				ON C.XUSR_EMPNO=XX.CRGR_EENO
				ORDER BY CRGR_EENO ASC,AS_TYPE ASC,FXT_INS_INFM_NOS ASC
            ]]>
            </value>
        </property>
    </bean>
	<!-- ================================================================================ -->
    <!-- A/S 대상 차량 메일 발송 배치 END -->
    <!-- ================================================================================ -->
    
    <!-- ================================================================================ -->
    <!-- 첨부파일 CLEAR START -->
    <!-- ================================================================================ -->
    <batch:job id="fileRemove">
        <batch:step id="fileRemove01Step" parent="simpleStep">
            <batch:tasklet>
            	<batch:listeners>
                    <batch:listener ref="fileRemove01DataSourceReader"/>
                    <batch:listener ref="fileRemove01Processor"/>
                </batch:listeners>
                <batch:chunk reader="fileRemove01ItemReaderAdaptor" writer="fileRemove01Writer">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
	</batch:job>
	
	<bean id="fileRemove01ItemReaderAdaptor" class="org.springframework.batch.item.adapter.ItemReaderAdapter">
        <property name="targetObject" ref="fileRemove01DataSourceReader" />
        <property name="targetMethod" value="read" />
    </bean>
    
    <bean id="fileRemove01Writer"
        class="org.springframework.batch.item.adapter.ItemWriterAdapter">
        <property name="targetObject" ref="fileRemove01Processor" />
        <property name="targetMethod" value="process" />
    </bean>
    
    <bean id="fileRemove01JdbcItemReader" class="org.springframework.batch.item.database.JdbcCursorItemReader">
        <property name="dataSource" ref="dataSource" />
        <property name="rowMapper" ref="bgabGascZ011DtoRowMapper" />
        <property name="sql">
            <value>
            <![CDATA[
				SELECT DOC_NO, AFFR_SCN_CD, OGC_FIL_NM FROM(
					SELECT 
						Z011.DOC_NO			,
						Z011.AFFR_SCN_CD	,
						Z011.OGC_FIL_NM		,
						CASE WHEN AFFR_SCN_CD = 'BT' THEN
							(SELECT COUNT(DOC_NO) FROM BGAB_GASCBT01$corp_cd$ WHERE DOC_NO = Z011.DOC_NO)
							WHEN  AFFR_SCN_CD = 'PS' THEN
							(SELECT COUNT(DOC_NO) FROM BGAB_GASCPS01$corp_cd$ WHERE DOC_NO = Z011.DOC_NO)
						END AS EXISTCNT
					FROM BGAB_GASCZ011$corp_cd$ Z011
				) TEMP
				WHERE EXISTCNT = 0
            ]]>
            </value>
        </property>
    </bean>    
    <!-- ================================================================================ -->
    <!-- 첨부파일 CLEAR 배치 END -->
    <!-- ================================================================================ -->
    
    <!-- ================================================================================ -->
    <!-- LOG CLEAR START -->
    <!-- ================================================================================ -->
    <batch:job id="logRemove">
        <batch:step id="logRemove01Step" parent="simpleStep">
            <batch:tasklet>
            	<batch:listeners>
                    <batch:listener ref="logRemove01DataSourceReader"/>
                    <batch:listener ref="logRemove01Processor"/>
                </batch:listeners>
                <batch:chunk reader="logRemove01ItemReaderAdaptor" writer="logRemove01Writer">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
	</batch:job>
	
	<bean id="logRemove01ItemReaderAdaptor" class="org.springframework.batch.item.adapter.ItemReaderAdapter">
        <property name="targetObject" ref="logRemove01DataSourceReader" />
        <property name="targetMethod" value="read" />
    </bean>
    
    <bean id="logRemove01Writer"
        class="org.springframework.batch.item.adapter.ItemWriterAdapter">
        <property name="targetObject" ref="logRemove01Processor" />
        <property name="targetMethod" value="process" />
    </bean>
    
    <bean id="logRemove01JdbcItemReader" class="org.springframework.batch.item.database.JdbcCursorItemReader">
        <property name="dataSource" ref="dataSource" />
        <property name="rowMapper" ref="commonDtoRowMapper" />
        <property name="sql">
            <value>
            <![CDATA[
            	SELECT GETDATE() AS VALUE
            ]]>
            </value>
        </property>
    </bean>    
    <!-- ================================================================================ -->
    <!-- LOG CLEAR 배치 END -->
    <!-- ================================================================================ -->
    
    <!-- ================================================================================ -->
    <!-- TRAFFIC TICKET START -->
    <!-- ================================================================================ -->
    <batch:job id="trafficTikcetEmail">
        <batch:step id="trafficTikcetEmail01Step" parent="simpleStep">
            <batch:tasklet>
            	<batch:listeners>
                    <batch:listener ref="trafficTikcetEmail01DataSourceReader"/>
                    <batch:listener ref="trafficTikcetEmail01Processor"/>
                </batch:listeners>
                <batch:chunk reader="trafficTikcetEmail01ItemReaderAdaptor" writer="trafficTikcetEmail01Writer">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
	</batch:job>
	
	<bean id="trafficTikcetEmail01ItemReaderAdaptor" class="org.springframework.batch.item.adapter.ItemReaderAdapter">
        <property name="targetObject" ref="trafficTikcetEmail01DataSourceReader" />
        <property name="targetMethod" value="read" />
    </bean>
    
    <bean id="trafficTikcetEmail01Writer"
        class="org.springframework.batch.item.adapter.ItemWriterAdapter">
        <property name="targetObject" ref="trafficTikcetEmail01Processor" />
        <property name="targetMethod" value="process" />
    </bean>
    
    <bean id="trafficTikcetEmail01JdbcItemReader" class="org.springframework.batch.item.database.JdbcCursorItemReader">
        <property name="dataSource" ref="dataSource" />
        <property name="rowMapper" ref="bgabGascTm01DtoRowMapper" />
        <property name="sql">
            <value>
            <![CDATA[
				SELECT A.DOC_NO
				     , A.EENO
					 , A.CAR_NO
					 , A.TIC_NO
					 , A.TIC_YMD
					 , A.TIC_PINT
					 , A.TIC_AMT
					 , B.XCOD_HNAME AS TIC_DESC
				  FROM BGAB_GASCTM01 A
				  LEFT OUTER JOIN BGAB_GASCZ005$corp_cd$ B 
				    ON A.TIC_DESC = B.XCOD_CODE
				   AND B.XCOD_KND = 'XTM01'
				 WHERE A.PTT_YMD BETWEEN CONVERT(NVARCHAR, GETDATE() ,112) 
				                     AND CONVERT(NVARCHAR, GETDATE()+3 ,112)
            ]]>
            </value>
        </property>
    </bean>
    <!-- ================================================================================ -->
    <!-- TRAFFIC TICKET 배치 END -->
    <!-- ================================================================================ -->
</beans>
